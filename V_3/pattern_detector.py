"""pattern_detector.py"""
from typing import Dict
import numpy as np

def detect_pattern(pattern: Dict[str,np.ndarray], white_list: Dict[str]) -> Dict[str,bool]:
    """ pattern detection
        using duty cylce , wave_length,
        args :
            * pattern (dict) : save the pattern
        returns :
            * Dict key is process name with value bool pattern detected or not
    """
    con = False
    conditions = dict()
    for key, val in pattern.items():
        if key in white_list:
            print("prog", key, "is white listed")
            continue
        m_arr = np.array([itr for itr in val]).flatten()
        t_arr = np.array([itr for itr in val]).flatten()
        # be aware of processes that uses the same memory always will get zero
        if m_arr.shape[0] > 2:

            threshold = (m_arr.max()+m_arr.min())/2.0
            mask_upper = m_arr > threshold
            mask_lower = m_arr <= threshold
            l1 = np.sum(mask_upper)
            l2 = np.sum(mask_lower)
            duty_cycle = np.maximum(l1, l2)/(l1 + l2)
            # numeric shift mask
            mask = np.where(m_arr > threshold)[0]
            shift_mask = mask[:mask.shape[0]-1]
            shift_mask = np.hstack((shift_mask[0], shift_mask))
            mask -= shift_mask

            set_val = set(mask[mask > 1.0])

            con = bool(len(set_val) <= 3)

        if con:
            conditions[key] = True
    return conditions
