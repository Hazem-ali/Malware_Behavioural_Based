import threading, time
import db_utils

WAIT_TIME_SECONDS = 10*60
ticker = threading.Event()


def save(p,q):
    print(p,q)
    print("save db")

def check_hash():
    pass

def periodic_db(white_list:set,black_list:dict,period_minutes:int = 10)->"hello":
    while not ticker.wait(WAIT_TIME_SECONDS):
        #save()
        # read
        read_white_list = db_utils.unpickle\
                ("\\database\\white_list_db.pickle",True)
        read_black_list = db_utils.unpickle\
            ("\\database\\black_list_db.pickle",False)
        # diffrence
        
        diff = set(black_list.keys()).symmetric_difference(\
                set(read_black_list.keys()))
        diff_dict = { key:val for key,val in black_list.items() if key in diff}        
        # upadte diff
        black_list = black_list.update(diff_dict)
        diff_white = white_list.union(read_white_list)        
        # write
        db_utils.save_db(diff_white, black=black_list)



def periodic_hash_check(period_minutes:int = 10):
    while not ticker.wait(period_minutes*60):
        #save()
        break
        #check_hash()

