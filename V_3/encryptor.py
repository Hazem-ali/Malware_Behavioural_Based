import pyAesCrypt as aes
# import os
import hashlib
from hashlib import sha256
# import rsa


class EN(object):
    def __init__(self, key: str):
        # user cannot surely know the key
        self.key = str(sha256(key.encode('utf-8')).hexdigest())[0:128]
        self.second_key = str(sha256(key.encode('utf-8')).hexdigest())[128:]
        return

    def encrypt(self, path: str, source: str) -> str:
        output = source + ".enc"
        k = self.key
        aes.encryptFile(source, output, k)
        return output

    def decrypt(self, path: str, source: str):
        data_frame = source.split(".")
        if len(data_frame) == 1:  # linux format
            output = data_frame[0]
        else:  # windows
            output = data_frame[0] + "."+data_frame[1]
        aes.decryptFile(source, output, self.key)
        return

    def set_key(self, new_key: str):
        k = str(input("Enter old key please"))
        hk = str(sha256(k.encode('utf-8')).hexdigest())[128:]
        if self.key == hk:
            self.key = hk
        else:
            print("Wrong!")
            #k = str(input("Enter old key please"))
            # set_key(k)


def get_hash(path: str):
    try:
        sha256_hash = hashlib.sha256()
        with open(path, "rb") as f:
            # Read and update hash string value in blocks of 4K
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception:
        return "OK"


def hash_malware(path: str, hash_):
    with open(path+".hash", "wb") as f:
        f.writelines(hash_)
