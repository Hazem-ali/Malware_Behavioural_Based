import threading, time
import db_utils
import monitor
import  utils
import encrytor

WAIT_TIME_SECONDS = 10*60
DB_HANDLER = threading.Event()
HASH_HANDLER = threading.Event()


def save(p,q):
    print(p,q)
    print("save db")

def check_hash(white_list:set,black_list:dict,period_minutes:int = 10):
    print("inthread")
    while not DB_HANDLER.wait(5):
        print("update")

    

def periodic_db(white_list:set,black_list:dict,period_minutes:int = 25):
    print("in DB thread")

    while not DB_HANDLER.wait(WAIT_TIME_SECONDS):

        # compare them with hash db

        # decrypt
        # save()
        # read
        read_white_list = db_utils.unpickle\
                ("./database/white_list_db.pickle",True)
        read_black_list = db_utils.unpickle\
            ("./database/black_list_db.pickle",False)
        # diffrence        
        diff = set(black_list.keys()).symmetric_difference(\
                set(read_black_list.keys()))
        diff_dict = { key:val for key,val in black_list.items() if key in diff}
        # upadte diff
        black_list = black_list.update(diff_dict)
        diff_white = white_list.union(read_white_list)
        # write
        db_utils.save_db(diff_white, black=black_list)



def periodic_hash_check(period_minutes:int = 30):
    print("in hash thread")
    while not HASH_HANDLER.wait(period_minutes*60):
        # read hashes
        hashes = db_utils.unpickle("./database/hashes_db.pickle",True)
        # get monitor new hashes
        _,names,name_pid = utils.get_memory(monitor.getListOfProcessSortedByMemory())
        names = set(names.keys())
        paths = {name: monitor.get_process_path(name)
                        for name in names
                        }
        all_hash = dict()
        all_hash = { name:encrytor.get_hash(path) for name, path in paths.items()}
        # compare
        for name , hash_ in hashes.items() :
            if hash_ in all_hash.values():
                print("terminated_with_hash")
                # terminate
                monitor.terminate_process(name_pid[name])