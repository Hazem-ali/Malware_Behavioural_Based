"""utils"""

# imports
from inputimeout import inputimeout, TimeoutOccurred

# please install de ya norm
# pip install inputimeout


def timout_input(time:int=3)->str:
    """ timingout for the user input to auto block the process
    args:
        * time (int): timeout time default value of 3
    returns:
        * (str) user answer
    """
    try:
        usr_answer = inputimeout(
            prompt='do you want to block the process [auto block in {}S] (y/n) ?\n'.format(time)
            , timeout=time)
        return usr_answer
    except TimeoutOccurred:
        usr_answer = 'y'
        return usr_answer

def whitelist_scraper(path:str = "result.txt")->set:
    """
    add trusted processes names to not checking them and save time
    args:
        * path (str): timeout time default value of 3
    returns:
        * (str) user answer
    """

    def list_to_set(list_:list)->set:
        return set([i.split('\'')[5] for i in list_])

    def set_to_dict(set_whilist_names:set)->dict:
        return { i:1 for i in set_whilist_names}

    lis = []
    with open(path, 'r',encoding='UTF-8') as file_:
        lines = file_.readlines()
        lis= [ l for l in lines]

    whilist_names_set= list_to_set(lis)
    return whilist_names_set

def get_proccess_name(memory: dict) -> list:
    return list(set(memory.keys()))

def get_memory(list_dict: list)->(dict, dict, dict):
    memory, exe_name, name_pid = dict(), dict(), dict()
    for process in list_dict:
        memory[process['pid']] = process['data']
        exe_name[process['pid']] = process['name']

        if name_pid.get(process['name']) is None:
            name_pid[process['name']] = [process['pid']]
        else:
            name_pid[process['name']] = name_pid.get(
                process['name']) + [process['pid']]
    return memory, exe_name, name_pid
