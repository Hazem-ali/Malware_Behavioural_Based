"""db_utils.py"""
from typing import Dict, Set, Tuple, Optional
import pickle
import os

def read_db(white_type: Optional[type] = Set, black_type: Optional[type] =Dict, black_path: Optional[str] = "./database/black_list_db.pickle",
            white_path: Optional[str] = "./database/white_list_db.pickle"
            ) -> Tuple[Set, Dict]:
    """ reading from database"""

    with open(white_path, 'rb') as fo:
        white_type = pickle.load(fo, encoding='bytes')

    with open(black_path, 'rb') as fo:
        black_type = pickle.load(fo, encoding='bytes')

    return white_type, black_type

def pickle_(file:str, db:object):
    with open(file, 'wb') as fo:
        pickle.dump(db, fo)

def save_db(white: Set, black: Dict):
    """ Saving into database"""
    try:
        pickle_("./database/white_list_db.pickle", white)
        pickle_("./database/black_list_db.pickle", black)
    except Exception:
        pickle_(str(os.getcwd()) + "/database/white_list_db.pickle", white)
        pickle_(str(os.getcwd()) + "/database/black_list_db.pickle", black)

def unpickle(file, set_: Optional[bool]=True)->Dict or Set:
    if set_ is False:
        with open(file, 'rb') as fo:
            return pickle.load(fo, encoding='bytes')

    with open(file, 'rb') as fo:
        return pickle.load(fo, encoding='bytes')

# def retrive_db()->(set,dict):
#     data_base =  { str(db[:-7]): unpickle(db)
#              for db in ["white_list_db.pickle","black_list_db.pickle"]}
#     # for db in ["white_list_db.pickle","black_list_db.pickle"]:
#     #     data_base[db[:-7]]= unpickle(db)
#     return data_base['white_list_db'],data_base['black_list_db']
