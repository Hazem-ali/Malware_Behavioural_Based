import pickle
import os


def read_db(white_type:type = set,black_type: type = dict
        ,black_path:str="./database/black_list_db.pickle",
        white_path:str="./database/white_list_db.pickle"
        )->(set,dict):
    
    with open(white_path, 'rb') as fo:
        white_type = pickle.load(fo, encoding='bytes')
    
    with open(black_path, 'rb') as fo:
        black_type = pickle.load(fo, encoding='bytes')
    
    return white_type,black_type


def hello():
    pass


def pickle_(file, db):
    with open(file, 'wb') as fo:
        pickle.dump(db, fo)
    return


def save_db(white: set, black: dict):
    try:
        pickle_("./database/white_list_db.pickle", white)
        pickle_("./database/black_list_db.pickle", black)
    except Exception:
        pickle_(str(os.getcwd()) + "/database/white_list_db.pickle", white)
        pickle_(str(os.getcwd()) + "/database/black_list_db.pickle", black)        
    return


def unpickle(file, set_=True):
    if set_ is False:
        with open(file, 'rb') as fo:
            dict = pickle.load(fo, encoding='bytes')
            return dict
    else:
        with open(file, 'rb') as fo:
            set = pickle.load(fo, encoding='bytes')
        return set

# def retrive_db()->(set,dict):
#     data_base =  { str(db[:-7]): unpickle(db)
#              for db in ["white_list_db.pickle","black_list_db.pickle"]}
#     # for db in ["white_list_db.pickle","black_list_db.pickle"]:
#     #     data_base[db[:-7]]= unpickle(db)
#     return data_base['white_list_db'],data_base['black_list_db']
