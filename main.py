import time
import math
import monitor


def Main_Monitor(terminate, shell_memory_function, del_threshold: int = 4) -> None:
    # memory = {}
    def get_memory(list_dict: list):
        memory = dict()
        for process in list_dict:
            #memory[process['pid']] = { process['name']: process['data']}
            memory[process['pid']] = process['data']
        return memory

    def get_proccess_name(memory: dict) -> list:
        return list(set(memory.keys()))

    initial_memory = dict()
    times = dict()
    time_black_list = dict()

    while True:
        data = shell_memory_function()
        memory = get_memory(data)
        proccesses = get_proccess_name(memory)
        for prog_pid in proccesses:

            if initial_memory.get(prog_pid) == None:
                initial_memory[prog_pid] = memory[prog_pid]
                # print('init',initial_memory )

            if int(abs(memory[prog_pid]-initial_memory[prog_pid])) in range(190, 212):
                #black_list[prog_name] = black_list.get(prog_name, 0) + 1
                print('Memory limit exceeded for process ', prog_pid)

                if (times.get(prog_pid) == None) or (time.time() - times.get(prog_pid) > 10):
                    times[prog_pid] = time.time()
                    print('initial time for ', prog_pid)

            if times.get(prog_pid) is not None:
                if math.ceil(int(abs(times.get(prog_pid)-time.time()))) in range(9, 11):
                    time_black_list[prog_pid] = time_black_list.get(
                        prog_pid, 0) + 1
                    times[prog_pid] = time.time()
                    # times[prog_name]
                    # program_name = ''
                    # for item in data:
                    #     if item['pid'] == prog_pid:
                    #         program_name = item['name']
                    #         break
                    print('Program with pid '+str(prog_pid) + ' Blacklisted')

            if time_black_list.get(prog_pid) is not None:
                if time_black_list[prog_pid] == del_threshold:
                    print('----------------------------   DETECTED   ----------------------------')
                    print('Booooom Headshot Process', prog_pid)
                    terminate(prog_pid)
                    exit()


def main():
    Main_Monitor(monitor.terminate_process,
                 monitor.getListOfProcessSortedByMemory)


if __name__ == "__main__":
    main()
