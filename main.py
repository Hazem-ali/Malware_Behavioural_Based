import time; import math
import monitor
def Main_Monitor(terminate,shell_memory_function,del_threshold:int=4)->None:
    # memory = {}
    def get_memory(list_dict:list):
        memory=dict()
        for process in list_dict:
            #memory[process['pid']] = { process['name']: process['data']}
            memory[process['pid']] = process['data']
        return memory

    def get_proccess_name (memory:dict)->list:
        return list(set(memory.keys()))


    initial_memory = dict()
    times= dict()
    time_black_list= dict()

    while True:
        memory = get_memory(shell_memory_function())
        proccesses = get_proccess_name(memory)
        for prog_name in proccesses:

            if initial_memory.get(prog_name) == None:
                initial_memory[prog_name]= memory[prog_name]
                # print('init',initial_memory )

            if int(abs(memory[prog_name]-initial_memory[prog_name])) in  range(190,212) :
                #black_list[prog_name] = black_list.get(prog_name, 0) + 1
                print('memory limit exceeded for process ',prog_name )
            
                if (times.get(prog_name) == None) or (time.time()- times.get(prog_name) > 10) :
                    times[prog_name] = time.time()
                    print('initial time ',prog_name)

            if times.get(prog_name) is not None:    
                if math.ceil(int(abs(times.get(prog_name)-time.time()))) in range(9,11):
                    time_black_list[prog_name] = time_black_list.get(prog_name, 0) + 1
                    times[prog_name] = time.time()
                    # times[prog_name]
                    print(prog_name,'blacklisted',sep= ' is ')

            if time_black_list.get(prog_name) is not None:    
                if  time_black_list[prog_name] == del_threshold :
                    print('booooom headshot procces', prog_name)
                    terminate(prog_name)  
                    exit()          



def main():
    Main_Monitor(monitor.terminate_process, monitor.getListOfProcessSortedByMemory)

if __name__ == "__main__":
    main()